#!/usr/bin/env node

/**
 * Generate version information from git commit data
 * This script creates a version.js file with current git commit information
 * and also sets environment variables for the build process
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * Execute git command and return the result
 * @param {string} command - Git command to execute
 * @returns {string} Command output
 */
function execGitCommand(command) {
  try {
    return execSync(command, { 
      encoding: 'utf8', 
      cwd: path.join(__dirname, '..'),
      stdio: ['pipe', 'pipe', 'pipe']
    }).trim();
  } catch (error) {
    console.warn(`Git command failed: ${command}`, error.message);
    return null;
  }
}

/**
 * Get git commit information
 * @returns {Object} Git information object
 */
function getGitInfo() {
  console.log('üîç Extracting git commit information...');
  
  // Get current commit hash
  const fullHash = execGitCommand('git rev-parse HEAD');
  const shortHash = execGitCommand('git rev-parse --short HEAD');
  
  // Get commit date in ISO format
  const commitDate = execGitCommand('git log -1 --format=%cI');
  
  // Get commit date as timestamp
  const commitTimestamp = execGitCommand('git log -1 --format=%ct');
  
  // Get branch name
  const branchName = execGitCommand('git rev-parse --abbrev-ref HEAD');
  
  // Get commit message (first line only)
  const commitMessage = execGitCommand('git log -1 --format=%s');
  
  // Get author info
  const authorName = execGitCommand('git log -1 --format=%an');
  const authorEmail = execGitCommand('git log -1 --format=%ae');
  
  // Check if working directory is clean
  const isClean = execGitCommand('git status --porcelain') === '';
  
  if (!fullHash || !shortHash || !commitDate) {
    console.warn('‚ö†Ô∏è  Could not retrieve git information. Using fallback values.');
    const now = new Date();
    return {
      hash: 'unknown',
      shortHash: 'unknown',
      date: now.toISOString(),
      timestamp: Math.floor(now.getTime() / 1000),
      branch: 'unknown',
      message: 'No git information available',
      author: {
        name: 'unknown',
        email: 'unknown'
      },
      isClean: false,
      buildTime: now.toISOString()
    };
  }
  
  const buildTime = new Date().toISOString();
  
  console.log(`‚úÖ Git info extracted:`);
  console.log(`   Commit: ${shortHash} (${fullHash})`);
  console.log(`   Date: ${commitDate}`);
  console.log(`   Branch: ${branchName}`);
  console.log(`   Clean: ${isClean ? 'Yes' : 'No (uncommitted changes)'}`);
  console.log(`   Build time: ${buildTime}`);
  
  return {
    hash: fullHash,
    shortHash: shortHash,
    date: commitDate,
    timestamp: parseInt(commitTimestamp),
    branch: branchName,
    message: commitMessage,
    author: {
      name: authorName,
      email: authorEmail
    },
    isClean: isClean,
    buildTime: buildTime
  };
}

/**
 * Format git commit date and hash into a version string
 * @param {string} dateString - ISO date string
 * @param {string} shortHash - Short git commit hash
 * @returns {string} Formatted version string
 */
function formatGitVersion(dateString, shortHash) {
  try {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');

    return `${year}.${month}.${day}-${hours}${minutes}${seconds}-${shortHash}`;
  } catch (error) {
    console.warn('Failed to format git version:', error);
    return `unknown-${shortHash}`;
  }
}

/**
 * Generate version.js file
 * @param {Object} gitInfo - Git information object
 */
function generateVersionFile(gitInfo) {
  const configDir = path.join(__dirname, '..', 'src', 'config');
  const versionFile = path.join(configDir, 'version.js');
  
  // Ensure config directory exists
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
    console.log(`üìÅ Created config directory: ${configDir}`);
  }
  
  const version = formatGitVersion(gitInfo.date, gitInfo.shortHash);
  
  const versionContent = `// Auto-generated version file
// Generated at: ${gitInfo.buildTime}
// Do not edit this file manually

const versionInfo = {
  hash: '${gitInfo.hash}',
  shortHash: '${gitInfo.shortHash}',
  date: '${gitInfo.date}',
  timestamp: ${gitInfo.timestamp},
  branch: '${gitInfo.branch}',
  message: '${gitInfo.message.replace(/'/g, "\\'")}',
  author: {
    name: '${gitInfo.author.name}',
    email: '${gitInfo.author.email}'
  },
  isClean: ${gitInfo.isClean},
  buildTime: '${gitInfo.buildTime}',
  version: '${version}'
};

export default versionInfo;
`;

  fs.writeFileSync(versionFile, versionContent);
  console.log(`üìù Version file generated: ${versionFile}`);
  console.log(`   Version: ${version}`);
}

/**
 * Generate .env file with git version variables
 * @param {Object} gitInfo - Git information object
 */
function generateEnvFile(gitInfo) {
  const envFile = path.join(__dirname, '..', '.env.version');
  const version = formatGitVersion(gitInfo.date, gitInfo.shortHash);
  
  const envContent = `# Auto-generated git version environment variables
# Generated at: ${gitInfo.buildTime}
# These variables are used during the build process

REACT_APP_GIT_COMMIT_HASH=${gitInfo.hash}
REACT_APP_GIT_COMMIT_SHORT_HASH=${gitInfo.shortHash}
REACT_APP_GIT_COMMIT_DATE=${gitInfo.date}
REACT_APP_GIT_COMMIT_TIMESTAMP=${gitInfo.timestamp}
REACT_APP_GIT_BRANCH=${gitInfo.branch}
REACT_APP_GIT_VERSION=${version}
REACT_APP_BUILD_TIME=${gitInfo.buildTime}
REACT_APP_GIT_IS_CLEAN=${gitInfo.isClean}
`;

  fs.writeFileSync(envFile, envContent);
  console.log(`üåç Environment file generated: ${envFile}`);
}

/**
 * Main function
 */
function main() {
  console.log('üöÄ Generating version information from git...');
  
  try {
    const gitInfo = getGitInfo();
    generateVersionFile(gitInfo);
    generateEnvFile(gitInfo);
    
    console.log('‚úÖ Version generation completed successfully!');
    console.log('');
    console.log('üìã Usage:');
    console.log('   - Import version info: import versionInfo from "./src/config/version.js"');
    console.log('   - Use in build: source .env.version before building');
    console.log('   - Environment variables are automatically available in React app');
    
  } catch (error) {
    console.error('‚ùå Failed to generate version information:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = {
  getGitInfo,
  formatGitVersion,
  generateVersionFile,
  generateEnvFile,
  main
};
