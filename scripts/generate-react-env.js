/**
 * Generate React environment variables from centralized configuration
 * This ensures the frontend uses the same ports as the backend services
 */

const fs = require('fs');
const path = require('path');

// Import centralized configuration
const { PORTS } = require('../server/config');

/**
 * Generate .env.local file for React with port configurations
 */
function generateReactEnv() {
  console.log('üîß Generating React environment variables...');
  
  // Create React environment variables with REACT_APP_ prefix
  const reactEnvVars = Object.entries(PORTS).map(([key, port]) => {
    return `REACT_APP_${key}_PORT=${port}`;
  });
  
  // Add additional React-specific environment variables
  const additionalVars = [
    '# React App Environment Variables',
    '# Generated automatically from centralized configuration',
    '# Do not edit this file manually - run npm run setup:react-env instead',
    '',
    ...reactEnvVars,
    '',
    '# Development settings',
    'GENERATE_SOURCEMAP=false',
    'REACT_APP_NODE_ENV=development'
  ];
  
  const envContent = additionalVars.join('\n') + '\n';
  
  // Write to .env.local (takes precedence over .env)
  const envPath = path.join(__dirname, '..', '.env.local');
  fs.writeFileSync(envPath, envContent);
  
  console.log(`‚úÖ React environment file created: ${envPath}`);
  console.log('üìã Generated variables:');
  reactEnvVars.forEach(varLine => {
    console.log(`   ${varLine}`);
  });
}

/**
 * Update package.json scripts to include React environment setup
 */
function updatePackageJsonScripts() {
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  
  if (!fs.existsSync(packageJsonPath)) {
    console.log('‚ö†Ô∏è  package.json not found, skipping script update');
    return;
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Add React environment setup to existing scripts
    if (!packageJson.scripts['setup:react-env']) {
      packageJson.scripts['setup:react-env'] = 'node scripts/generate-react-env.js';
      
      // Update start script to include React env generation
      if (packageJson.scripts.start && !packageJson.scripts.start.includes('setup:react-env')) {
        packageJson.scripts['start:original'] = packageJson.scripts.start;
        packageJson.scripts.start = 'npm run setup:react-env && node scripts/start-frontend.js';
      }
      
      // Update dev script to include React env generation
      if (packageJson.scripts.dev && !packageJson.scripts.dev.includes('setup:react-env')) {
        const originalDev = packageJson.scripts.dev;
        packageJson.scripts.dev = 'npm run setup:react-env && ' + originalDev;
      }
      
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log('‚úÖ Updated package.json scripts');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not update package.json scripts:', error.message);
  }
}

/**
 * Create a React configuration file that can be imported
 */
function createReactConfigFile() {
  console.log('üìù Creating React configuration file...');
  
  const configContent = `/**
 * React App Configuration
 * Generated automatically from centralized server configuration
 * Do not edit this file manually - run npm run setup:react-env instead
 */

// Port configurations from environment variables
export const PORTS = {
  FRONTEND: parseInt(process.env.REACT_APP_FRONTEND_PORT) || 3030,
  BACKEND: parseInt(process.env.REACT_APP_BACKEND_PORT) || 3031,
  WEBSOCKET: parseInt(process.env.REACT_APP_WEBSOCKET_PORT) || 3032,
  VIDEO_RENDERER: parseInt(process.env.REACT_APP_VIDEO_RENDERER_PORT) || 3033,
  VIDEO_RENDERER_FRONTEND: parseInt(process.env.REACT_APP_VIDEO_RENDERER_FRONTEND_PORT) || 3034,
  NARRATION: parseInt(process.env.REACT_APP_NARRATION_PORT) || 3035,
  CHATTERBOX: parseInt(process.env.REACT_APP_CHATTERBOX_PORT) || 3036
};

// API Base URLs
export const API_URLS = {
  BACKEND: \`http://localhost:\${PORTS.BACKEND}\`,
  VIDEO_RENDERER: \`http://localhost:\${PORTS.VIDEO_RENDERER}\`,
  NARRATION: \`http://localhost:\${PORTS.NARRATION}\`,
  CHATTERBOX: \`http://localhost:\${PORTS.CHATTERBOX}\`,
  WEBSOCKET: \`ws://localhost:\${PORTS.WEBSOCKET}\`
};

// Environment detection
export const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';
export const IS_PRODUCTION = process.env.NODE_ENV === 'production';

export default {
  PORTS,
  API_URLS,
  IS_DEVELOPMENT,
  IS_PRODUCTION
};
`;
  
  const configPath = path.join(__dirname, '..', 'src', 'config', 'appConfig.js');
  const configDir = path.dirname(configPath);
  
  // Ensure config directory exists
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  
  fs.writeFileSync(configPath, configContent);
  console.log(`‚úÖ React configuration file created: ${configPath}`);
}

/**
 * Main function
 */
function main() {
  console.log('üöÄ Setting up React environment configuration');
  console.log('==============================================\n');
  
  try {
    generateReactEnv();
    createReactConfigFile();
    updatePackageJsonScripts();
    
    console.log('\n‚úÖ React environment setup completed successfully!');
    console.log('\nüìã Next steps:');
    console.log('   1. Restart your React development server');
    console.log('   2. Update your components to use the new config:');
    console.log('      import { PORTS, API_URLS } from "../config/appConfig";');
    console.log('   3. The environment variables are automatically loaded');
    
  } catch (error) {
    console.error('‚ùå Error setting up React environment:', error);
    process.exit(1);
  }
}

// Run the setup if this script is executed directly
if (require.main === module) {
  main();
}

module.exports = {
  generateReactEnv,
  createReactConfigFile,
  updatePackageJsonScripts
};
